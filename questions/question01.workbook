---
uti: com.xamarin.workbook
id: 516e892f-eeb1-40b3-8c1c-b568602aaa10
title: question01
platforms:
- DotNetCore
---

# 매일프로그래밍 - Question 1

정수 배열(int array)가 주어지면 가장 큰 이어지는 원소들의 합을 구하시오. 단, 시간복잡도는 O(n).

예제}

Input: \[-1, 3, -1, 5]\
Output: 7 // 3 + (-1) + 5

Input: \[-5, -3, -1]\
Output: -1 // -1

Input: \[2, 4, -2, -3, 8]\
Output: 9 // 2 + 4 + (-2) + (-3) + 8

문제 풀이에 필요한 알고리즘: [Maximum subarray problem](https://en.wikipedia.org/wiki/Maximum_subarray_problem)\
참조: [풀이 링크](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray)

```csharp
int GetMaxSubArraySum(params int[] array)
{
    int maxValue = int.MinValue;
    int sum = 0;

    foreach (int item in array)
    {
        sum = Math.Max(sum, 0) + item;
        maxValue = Math.Max(sum, maxValue);
    }

    return maxValue;
}
```

```csharp
GetMaxSubArraySum(-1, 3, -1, 5);
// result is 7
```

```csharp
GetMaxSubArraySum(-5, -3, -1);
// result is -1
```

```csharp
GetMaxSubArraySum(2, 4, -2, -3, 8);
// result is 9
```

# 새로 알게 된 점

## 동적 계획법

쉽게 말하자면 한 번 했던 연산은 다시 안 하도록 해서 효율적인 알고리즘을 만드는 방법

**종류**

* 상향식 : 했던 연산들을 캐싱하여 다시 연산하지 않도록 함

* 하향식 : 애초에 처음부터 중복된 연산을 하지 않도록 함 **(리얼 동적 계획법 ㄷㄷㄷ)**

## 참고

* [위키백과](https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95)

* [꺼무위키](https://namu.wiki/w/%EB%8F%99%EC%A0%81%20%EA%B3%84%ED%9A%8D%EB%B2%95)

* [티스토리](http://new93helloworld.tistory.com/220)