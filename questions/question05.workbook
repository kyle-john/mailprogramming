---
uti: com.xamarin.workbook
id: 651ddb84-823b-4c47-a05f-9a1da8c85b90
title: question05
platforms:
- DotNetCore
---

# 매일프로그래밍 - 실리콘밸리 패키지 문제 5

정수 배열과 타겟 숫자가 주어지면, 합이 타겟값이 되는 두 원소의 인덱스를 찾으시오.

단, 시간복잡도 O(n) 여야 합니다.

예제)

Input: \[2, 5, 6, 1, 10], 타겟 8\
Output: \[0, 2] // 배열\[0] + 배열\[2] = 8

# 풀이

일단 고등학교 통계 시간에 했던 것 처럼 모든 경우의 수를 적어보았다.

## 배열의 개수가 3 일 때

|1|2|3|
|-|-|-|
|1|2| |
|1| |3|
| |2|3|

## 배열의 개수가 4 일 때

|1|2|3|4|
|-|-|-|-|
|1|2| | |
|1| |3| |
|1| | |4|
| |2|3| |
| |2| |4|
| | |3|4|

대충 규칙을 보면 \
첫번째 인덱스는 0부터 n-1까지\
두번째 인덱스는 i+1부터 n까지임을 볼 수 있다.

for 문으로 나타내보자.

```csharp
(int, int) GetIndexes(int[] array, int number)
{
    for (int i = 0; i < array.Length - 1; i++)
    {
        for (int j = i + 1; j < array.Length; j++)
        {
            if (array[i] + array[j] == number)
                return (i, j);
        }
    }

    return (-1,-1);
}
```

```csharp
GetIndexes(new[] { 2, 5, 6, 1, 10 }, 8)
// result is (0, 2).
```

그런데 이게 O(n)인지 모르겠다. 한 번 검증해보자.

아까 전에 나타낸 표를 보면 경우의 수가 `(n-1) + (n-2) + (n-3) + …` 의 형태를 보인다. \
고딩 때 배웠던 시그마로 나타내고 공식 사용하면 쉽겠지만 기억이 나지 않으니까 일단 다 적어보겠다.

|n|식|정리한 식|
|-|-|-|
|2|2n-3|n(n-1.5)|
|3|3n-6|n(n-2)|
|4|4n-10|n(n-2.5)|
|5|5n-15|n(n-3)|
|6|6n-21|n(n-3.5)|

정리한 식을 더 추려보면\
`n(n - 1/2(n+1))`\
= `1/2n(2n-(n+1))`\
= `1/2n(2n-n-1)`\
= `1/2n(n-1)`\
= `1/2n^2 - 1/2n`

ㅋㅋㅋㅋㅋㅋㅋㅋ O(n^2)이다.\
정답 뭐지… 찾아봐야겠다.

# 답안

찾아보니 이 문제를 푸는데 세가지의 방법이 있는 것 같다.

1. 지금 처럼 풀기 -> O(n^2)

2. 배열을 정렬해서 바이너리 검색하기  -> O(n log n)

3. 해시 테이블에 넣고 확인하기 -> O(n)

해시 테이블에 넣고 확인만 하는데 어떻게 되는 걸까?\
원리는 다음과 같다.

1. 배열을 순회하며 현재 값에 더해야 N이 되는 수와 현재 값을 해시 테이블에 넣는다.

2. 현재 값이 해시 테이블 키에 있다면, 다시 말하자면 이전에 주어진 값에 현재 값을 더했다면 N이 되는 경우에 그 값들을 리턴한다.

예) N = 5이고 주어진 배열이 \[1, 2, 3]일 때\
hash table의 값은 \[(4, 1), (3, 2), (2, 3)]이 되고\
배열을 순회하며 hash table에 키가 있는지 확인한다.\
그럼 i = 1일 때 (2,3)이 정답이라는 것을 알 수 있다.

코드로 써보면

```csharp
int[] array =  { 2, 5, 6, 1, 10 };
int number = 8;

var dic = new Dictionary<int, int>();
foreach (int item in array)
{
    if (dic.ContainsKey(item))
        return (dic[item], item);
    else
        dic.Add(number - item, item);
}

// result is (2, 6)
```

다만 이는 인덱스를 가져오는 것이 아니다.\
인덱스를 가져와보자.

```csharp
(int, int) GetIndexes2(int[] array, int number)
{
    var dic = new Dictionary<int, int>();
    foreach (int item in array)
    {
       if (dic.ContainsKey(item))
            return (Array.IndexOf(array, dic[item]), Array.IndexOf(array, item));
        else
            dic.Add(number - item, item);
    }

    return (-1,-1);
}
```

```csharp
GetIndexes2(new[] { 2, 5, 6, 1, 10 }, 8)
// result is (0, 2).
```

이렇게 하면 O(n)으로 값을 가져올 수 있다.

배열을 순회하며 미리 요구되는 값을 구해놓고\
값이 오면 리턴하는 알고리즘이였다.

앞으로도 조금 효율적으로 생각하도록 해보자.

# 참고 링크

* [Stackoverflow](https://stackoverflow.com/questions/4720271/find-a-pair-of-elements-from-an-array-whose-sum-equals-a-given-number)

* [GeeksforGeeks](https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/)